version: 2.1

executors:
  py37-docker-image:
    docker:
      - image: cimg/python:3.7.12
  py38-docker-image:
    docker:
      - image: cimg/python:3.8.12
  py39-docker-image:
    docker:
      - image: cimg/python:3.9.7
  java15-docker-image:
    docker:
      - image: cimg/openjdk:15.0.1
  base-linux-2021_07:
    docker:
    - image: cimg/base:2021.07


commands:
  install_tox:
    description: "Install tox python automation tool"
    steps:
      - run:
          name: Install tox python automation tool
          command: python -m pip install --user tox

  run_tox:
    description: "Run tox."
    parameters:
      toxenv:
        default: "dev-test-cov"
        type: string
    steps:
      - run: pwd
      - checkout
      - run: python --version
      - run:
          name: Equip machine with wmctrl, a vital dependency of pydoer
          command: sudo apt-get update && sudo apt-get install -y wmctrl
      - run:
          name: Equip machine with latest pip & wheel
          command: python -m pip install -U pip wheel
      - install_tox
      - run:
          name: Run tox
          command: TOXENV=<<parameters.toxenv>> python -m tox -vv


jobs:
  test_python37:
    executor: py37-docker-image
    steps:
      - run_tox:
          toxenv: "py37"
  test_python39:
    executor: py39-docker-image
    steps:
      - run_tox:
          toxenv: "py39"
  build_n_test:
    executor: py38-docker-image
    steps:
      - run_tox:
          toxenv: "py38-cov"
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts:
          path: test-results
      # currently the 'test-results' path (define above) must match the TEST_RESULTS_DIR env variable found in circleci web site
      - store_artifacts:
          path: .coverage
      - run:
          name: Manually install the python py package
          command: python -m pip install py
      - run:
          name: Transform test results into 2 formats; html & xml
          command: python -m tox -e format-report -vv
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
          destination: htmlcov
      # Persist the specified paths (eg .coverage and tox.ini) into the workspace for use in proceeding job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - coverage.xml
            - .coverage
            - tox.ini
            - .git

  send-coverage-to-codacy:
    executor: java15-docker-image
    steps:
      - attach_workspace:
          at: .
      - run: curl --version
      - run: java --version
      - run:
          name: Send test data to codacy.com server
          command: |
            sudo apt-get install jq
            curl -LSs "$(curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(".jar"))) | .[0].browser_download_url')" -o codacy-coverage-reporter-assembly.jar
            java -jar codacy-coverage-reporter-assembly.jar report -l Python -r coverage.xml

  send-coverage-to-codecov:
    executor: base-linux-2021_07
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Download script that can upload to codecov.io
          command: curl -s https://codecov.io/bash > .codecov
      - run:
          name: Grant execution permissions to the script
          command: chmod +x .codecov
      - run:
          name: Upload the code coverage measurements to codecov.io, resulted from running the test suite (unit tests)
          command: ./.codecov

  deploy-to-staging:
    executor: py38-docker-image
    steps:
      - checkout
      - install_tox
      - run:
          name: Check code to comply with best practices of Python packaging ecosystem (pypi, pip, etc)
          command: tox -e check -vv
      - run:
          name: Build the code and create .tar.gz and .whl files
          command: tox -e build -vv
      - run:
          name: Deploy package (source distro & wheel) to 'testpypi' (index) server
          command: |
            export PYDOER_RELEASE_VERSION=$(python -c 'import re; f = open("src/pydoer/__init__.py"); c = f.read(); m = re.search(r"__version__[\s\ ]*=[\s\ ]*.(\d+(?:\.\d+)*)", c); print(m.group(1)); f.close()')
            python -m tox -e deploy -vv

  # integration-test:
  #   executor: py38-docker-image
  #   steps:
  #     - checkout
  #     - run:
  #         name: Run the automated integration test script
  #         command: |
  #           chmod +x scripts/integration-test.sh
  #           scripts/integration-test.sh $(python -c 'import re; f = open("src/pydoer/__init__.py"); c = f.read(); m = re.search(r"__version__[\s\ ]*=[\s\ ]*.(\d+(?:\.\d+)*)", c); print(m.group(1)); f.close()')

  visualize_dependency_graphs:
    executor: py38-docker-image
    environment:
      PYDOER_DEPS_GRAPHS: dependencies-graphs
    steps:
      - checkout
      - run: sudo apt-get update
      - run: python -m pip install -U pip
      - run:
          name: Install the dot binary included in the graphviz package/distribution
          command: sudo apt-get install graphviz
      - install_tox
      - run:
          name: Visualize dependency graphs as .svg files
          command: python -m tox -e graphs -vv
      - store_artifacts:
          path: dependencies-graphs
          destination: dep-graphs
      # - run:
      #     name: Visualize uml diagrams as .svg files
      #     command: python -m tox -vv -e uml -- svg
      # - store_artifacts:
      #     path: uml-diagrams
      #     destination: uml-diagrams


workflows:
  version: 2
  build_accept:
    jobs:
      - test_python37:
          filters:
            tags:
              only: /.*/  # runs for all branches and all tags
      - test_python39:
          filters:
            tags:
              only: /.*/  # runs for all branches and all tags
      - build_n_test:
          filters:
            tags:
              only: /.*/  # runs for all branches and all tags
      - send-coverage-to-codacy:
          requires:
            - build_n_test
          filters:
            tags:
              only: /.*/
      - send-coverage-to-codecov:
          requires:
            - build_n_test
          filters:
            tags:
              only: /.*/
      - visualize_dependency_graphs:
          filters:
            branches:
              only:
                - master
                - dev
                - release-staging
      - deploy-to-staging:
          context:
            - TEST_PYPI_CREDENTIALS
          requires:
            - test_python37
            - test_python39
            - build_n_test
          filters:
            branches:
              only: release-staging
      # - build-documentation:
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - dev
      #           - release-staging
