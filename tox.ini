[tox]
# isolated_build = true
# requires = pip >= 22.0.0
skip_missing_interpreters = true
envlist = mypy, py36, py37, py38, py39, py310


[testenv]
description = An environment designed to facilitated testing (running the test suite)
basepython = {dev-test,run,run-dev,format-report,check,build,deploy,graphs,pylint,prospector}: {env:TOXPYTHON:python3}
passenv =
    *
    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
setenv =
; It will overide variables in passenv in case of collision
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    TEST_RESULTS_DIR={toxinidir}/test-results
deps = pytest
commands = pytest -vv {posargs}


[dev-env]
description = An Development environment (suitable for local development). Whenever the developer changes
    the code, there is no need to re-install the package, since in this environment we install the code in
    "edit" mode: we invoke "pip install -e ..." under the hood.
deps = -r requirements/dev.txt
use_develop = true


[testenv:dev-test]
description = {[testenv]description}
deps =
    {[dev-env]deps}
    {[testenv]deps}
use_develop = {[dev-env]use_develop}


[testenv:dev-test-cov]
description = {[testenv]description}
basepython = python
deps =
    {[dev-env]deps}
    {[testenv]deps}
    pytest-cov
use_develop = {[dev-env]use_develop}
commands = pytest {posargs} --cov -vv --cov-report=term-missing --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}


[testenv:py38-cov]
basepython = python3.8
deps =
    {[testenv]deps}
    pytest-cov
commands = {posargs:pytest --cov -vv --cov-report=term-missing --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}}

[testenv:test]
description = Build, Install and Test. Use as TOXPYTHON=python3.7 tox -e test
basepython = {env:TOXPYTHON:python3}


[runenv]
description = Run the cli and render the interactive menu.

[testenv:run]
description = Build and install the pydoer package. {[runenv]description}
deps = -r requirements/dev.txt
commands = pydoer menu {toxinidir}/menu_entries.json

[testenv:run-dev]
description = Build and install the pydoer package in 'edit' mode. {[runenv]description}
deps = -r requirements/dev.txt
use_develop = True
commands = pydoer menu {toxinidir}/menu_entries.json



### SUPPORT


## Reporting

[testenv:format-report]
description = Generate xml and html formatted files out of previously computed code coverage results.
deps = coverage
skip_install = true
commands =
    coverage xml
    coverage html


## Packaging

[testenv:check]
description = Check the code for compliance with best practises of Python packaging ecosystem (PyPI, pip, Distribute, etc).
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
    pyroma
skip_install = true
commands =
    check-manifest
    pyroma -d {toxinidir}


[testenv:build]
description = Create/build the python package/distribution.
    Creates .tar.gz and .whl files in the dist folder, that can be upload to a pypi index server.
deps =
    setuptools >= 40.0.0
    wheel
skip_install = true
commands_pre =
    python -c 'import os; import shutil; exec("if os.path.exists(os.path.join(\"{toxinidir}\", \"dist\")):\n    shutil.rmtree(os.path.join(\"{toxinidir}\", \"dist\"))")'
commands = python setup.py sdist bdist_wheel


## Deploy package in pypi server

# usage 1
# deploy to testpypi while ignoring collisions (case where the version already exists on remote)
# python -m tox -e deploy

# usage 2
# deploy to pypi
# PYPI_SERVER=pypi python -m tox -e deploy

[testenv:deploy]
description = Deploy the python package to be hosted in a pypi server. Requires the PYDOER_RELEASE_VERSION
    environment variable to contain the string that represents the semantic version (eg 0.5.3 or 1.0.0) under which
    to release the pydoer package to pypi. By default, deploys to the official test-pypi server.
    If you want to deploy to the "production" pypi then you have to set the PYPI_SERVER environment
    variable like `export PYPI_SERVER=pypi`. Also runs certain checks on the packaged distribution (.tar.gz and .whl)
deps =
    keyring==21.3.0
    twine==3.4.0
skip_install = true
commands_pre =
    python -m twine check dist/pydoer-{env:PYDOER_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}*
commands =
    python -m twine {posargs:upload --non-interactive} --repository {env:PYPI_SERVER:testpypi --skip-existing} dist/pydoer-{env:PYDOER_RELEASE_VERSION:PLEASE_INDICATE_THE_SEM_VER_FOR_RELEASE}* --verbose



## GENERATE ARCHITECTURE GRAPHS

[testenv:graphs]
description = Visualise the dependency graphs (roughly which module imports which), by examining the
    Python code. The dependency graph(s) are rendered in .svg file(s) and saved on the disk. You can
    use the PYDOER_DEPS_GRAPHS environment variable to determine the directory location to store the visualisation(s). If
    the variable is not supplied then the default folder 'pydoer-dependency-graphs', inside the project's root folder, is used. If the directory does not exist it gets created.
    Requires that the 'dot' executable is in your PATH. Installing the graphviz library should make the dot executable available
    in PATH. Installing 'graphviz':
    * For Linux users using Debian-based distributions (ie Ubuntu, Debian, Mint), please run "sudo apt install graphviz"
    * For MacOS users Homebrew, please run "brew install graphviz"
basepython = {env:TOXPYTHON:python3.8}
passenv =
    HOME
    PYDOER_DEPS_GRAPHS
setenv =
    DEPS_DEFAULT_LOCATION = pydoer-dependency-graphs
deps =
    attrs
    click
    console_menu~=0.6.0
    pydeps==1.9.13
use_develop = true
commands_pre =
    - python -c 'import os; my_dir = os.getcwd(); os.mkdir(os.path.join(my_dir, "{env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}"))'
commands =
    pydeps --version

    # --max-bacon : exclude nodes that are more than n hops away
    # (default=2, 0 -> infinite)

    # --min-cluster-size : the minimum number of nodes a dependency must have before being clustered (default=0)

    # --max-cluster-size : the maximum number of nodes a dependency can have before the cluster is collapsed to a single node (default=0)
    # --keep-target-cluster : draw target module as a cluster

    # Draw only the source code package inner dependencies
    pydeps src/pydoer --only pydoer --noshow -o {env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/pydoer_inner_deps.svg
    # Draw the source code package inner and external dependencies
    pydeps src/pydoer --cluster --noshow -o {env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/deps_deps.svg

    # Visualize the package inner dependencies and abstract the external (eg with numpy, pandas, etc) ones
    # Draw the source code package inner and minimum external dependencies
    pydeps src/pydoer --max-cluster-size=2 --keep-target-cluster --noshow -o {env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/pydoer_target_cluster_deps_one_arrow.svg

    # Draw the source code package inner and all external dependencies
    pydeps src/pydoer --keep-target-cluster --noshow -o {env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}/pydoer_target_cluster_deps_all_arrows.svg

    python -c 'import os; my_dir = os.getcwd(); print("\nGenerated dependency graph(s), as .svg files."); print("The graph(s) reside in the \"" + os.path.join(my_dir, "{env:PYDOER_DEPS_GRAPHS:{env:DEPS_DEFAULT_LOCATION}}") + "\" directory and you can now view them ie in your browser.\n")'


## Code Static Analysis

[testenv:pylint]
description = Run the Pylint tool to analyse the Python code and output information about errors,
    potential problems and convention violations
deps = pylint==2.7.4
use_develop = true
commands = python -m pylint {posargs:{toxinidir}/src/pydoer {toxinidir}/setup.py {toxinidir}/tests}


[testenv:prospector]
description = Analyse Python code and output information about errors, potential problems, convention violations and complexity.
    Runs the prospector tool which brings together the functionality of other Python analysis tools such as Pyflakes and McCabe complexity.
    We run tools: Pyflakes, Pyroma, McCabe and Dodgy
deps = prospector[with_pyroma]
skip_install = true
commands_pre =
    # We do not run pylint, since we have a dedicated pylint env for it.
    # Prospector still tries to read .pylintrc, which causes a crash (bevause .pylintrc was generated with a pylint version higher than the one supported by prospector)
    # So we temporarily "hide" .pylintrc from prospector
    python -c 'import os; exec("if os.path.exists(os.path.join(\"{toxinidir}\", \".pylintrc\")):\n    os.rename(os.path.join(\"{toxinidir}\", \".pylintrc\"), os.path.join(\"{toxinidir}\", \".pylintrc-bak\"))")'
commands =
    prospector {toxinidir}/setup.py
    prospector {toxinidir}/tests
    prospector {toxinidir}/src
commands_post =
    # We "restore" .pylintrc (to be available to the pylint env command)
    python -c 'import os; exec("if os.path.exists(os.path.join(\"{toxinidir}\", \".pylintrc-bak\")):\n    os.rename(os.path.join(\"{toxinidir}\", \".pylintrc-bak\"), os.path.join(\"{toxinidir}\", \".pylintrc\"))")'
